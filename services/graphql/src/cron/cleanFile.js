const { paths, cron } = require('config');

const appLogger = require('../lib/logger/appLogger');
const Cron = require('./cron');

const { deleteFilesInDir } = require('../lib/files');

const cronConfig = cron.cleanFile;

let { active } = cronConfig;
if (active === 'true' || active) active = true;
else active = false;

/**
 * Removes files generated by an update process that are older than 30 days.
 *
 * @returns {Promise<void>}
 */
async function task() {
  appLogger.info('[cron][Clean file]: Has start');

  // Logs
  const accessLogFiles = await deleteFilesInDir(
    paths.log.accessDir,
    cronConfig.accessLogRetention,
  );
  appLogger.info(`[cron][Clean file]: ${accessLogFiles?.join(',')} (${accessLogFiles.length}) access log file are deleted`);

  const applicationLogFile = await deleteFilesInDir(
    paths.log.applicationDir,
    cronConfig.applicationLogRetention,
  );
  appLogger.info(`[cron][Clean file]: ${applicationLogFile?.join(',')} (${applicationLogFile.length}) application log file are deleted`);

  const healthcheckLogFile = await deleteFilesInDir(
    paths.log.healthcheckDir,
    cronConfig.healthcheckLogRetention,
  );
  appLogger.info(`[cron][Clean file]: ${healthcheckLogFile?.join(',')} (${healthcheckLogFile.length}) healthcheck log file are deleted`);

  appLogger.info('[cron][Clean file]: Has finished');
}

const deleteFileCron = new Cron('Clean file', cronConfig.schedule, task, active);

/**
 * Update config of update process and config of cron.
 *
 * @param {Object} newConfig Global config.
 */
function update(newConfig) {
  if (newConfig.schedule) {
    cronConfig.schedule = newConfig.schedule;
    deleteFileCron.setSchedule(newConfig.schedule);
  }
  if (newConfig.accessLogRetention) cronConfig.accessLogRetention = newConfig.accessLogRetention;
  if (newConfig.applicationLogRetention) {
    cronConfig.applicationLogRetention = newConfig.applicationLogRetention;
  }
  if (newConfig.healthcheckLogRetention) {
    cronConfig.healthcheckLogRetention = newConfig.healthcheckLogRetention;
  }
  if (newConfig.accessLogRetention
    || newConfig.applicationLogRetention
    || newConfig.healthcheckLogRetention) {
    deleteFileCron.setTask(task);
  }
}

function getGlobalConfig() {
  const order = [
    'name',
    'schedule',
    'accessLogRetention',
    'applicationLogRetention',
    'healthcheckLogRetention',
    'active',
  ];

  const data = { ...cronConfig, ...deleteFileCron.config };

  const result = {};
  order.forEach((key) => {
    if (data[key] !== undefined) {
      result[key] = data[key];
    }
  });
  return result;
}

module.exports = {
  getGlobalConfig,
  update,
  cron: deleteFileCron,
};
