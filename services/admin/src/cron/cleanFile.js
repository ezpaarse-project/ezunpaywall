const { paths, cron } = require('config');

const appLogger = require('../lib/logger/appLogger');
const Cron = require('./cron');

const { deleteFilesInDir } = require('../lib/files');

const cronConfig = cron.cleanFile;

let { active } = cronConfig;
if (active === 'true' || active) active = true;
else active = false;

/**
 * Removes files generated by an update process that are older than 30 days.
 *
 * @returns {Promise<void>}
 */
async function task() {
  appLogger.info('[cron][Clean file]: Has start');

  // Data
  const deletedChangefiles = await deleteFilesInDir(
    paths.data.changefilesDir,
    cronConfig.changefileThreshold,
  );
  appLogger.info(`[cron][Clean file]: ${deletedChangefiles?.join(',')} (${deletedChangefiles.length}) changefiles are deleted`);

  const deletedReportFiles = await deleteFilesInDir(
    paths.data.reportsDir,
    cronConfig.reportThreshold,
  );
  appLogger.info(`[cron][Clean file]: ${deletedReportFiles?.join(',')} (${deletedReportFiles.length}) reports are deleted`);

  const deletedSnapshotFiles = await deleteFilesInDir(
    paths.data.snapshotsDir,
    cronConfig.snapshotThreshold,
  );
  appLogger.info(`[cron][Clean file]: ${deletedSnapshotFiles?.join(',')} (${deletedSnapshotFiles.length}) snapshots are deleted`);

  // Logs
  const accessLogFiles = await deleteFilesInDir(
    paths.log.accessDir,
    cronConfig.accessLogThreshold,
  );
  appLogger.info(`[cron][Clean file]: ${accessLogFiles?.join(',')} (${accessLogFiles.length}) access log file are deleted`);

  const applicationLogFile = await deleteFilesInDir(
    paths.log.applicationDir,
    cronConfig.applicationLogThreshold,
  );
  appLogger.info(`[cron][Clean file]: ${applicationLogFile?.join(',')} (${applicationLogFile.length}) application log file are deleted`);

  const healthcheckLogFile = await deleteFilesInDir(
    paths.log.healthcheckDir,
    cronConfig.healthcheckLogThreshold,
  );
  appLogger.info(`[cron][Clean file]: ${healthcheckLogFile?.join(',')} (${healthcheckLogFile.length}) healthcheck log file are deleted`);

  appLogger.info('[cron][Clean file]: Has finished');
}

const deleteFileCron = new Cron('Clean file', cronConfig.schedule, task, active);

/**
 * Update config of update process and config of cron.
 *
 * @param {Object} newConfig Global config.
 */
function update(newConfig) {
  if (newConfig.schedule) {
    cronConfig.schedule = newConfig.schedule;
    deleteFileCron.setSchedule(newConfig.schedule);
  }
  if (newConfig.changefileThreshold) cronConfig.changefileThreshold = newConfig.changefileThreshold;
  if (newConfig.reportThreshold) cronConfig.reportThreshold = newConfig.reportThreshold;
  if (newConfig.snapshotThreshold) cronConfig.snapshotThreshold = newConfig.snapshotThreshold;
  if (newConfig.accessLogThreshold) cronConfig.accessLogThreshold = newConfig.accessLogThreshold;
  if (newConfig.applicationLogThreshold) {
    cronConfig.applicationLogThreshold = newConfig.applicationLogThreshold;
  }
  if (newConfig.healthcheckLogThreshold) {
    cronConfig.healthcheckLogThreshold = newConfig.healthcheckLogThreshold;
  }
  if (newConfig.changefileThreshold
    || newConfig.reportThreshold
    || newConfig.snapshotThreshold
    || newConfig.accessLogThreshold
    || newConfig.applicationLogThreshold
    || newConfig.healthcheckLogThreshold) {
    deleteFileCron.setTask(task);
  }
}

function getGlobalConfig() {
  const order = [
    'name',
    'schedule',
    'changefileThreshold',
    'reportThreshold',
    'snapshotThreshold',
    'accessLogThreshold',
    'applicationLogThreshold',
    'healthcheckLogThreshold',
    'active',
  ];

  const data = { ...cronConfig, ...deleteFileCron.config };

  const result = {};
  order.forEach((key) => {
    if (data[key] !== undefined) {
      result[key] = data[key];
    }
  });
  return result;
}

module.exports = {
  getGlobalConfig,
  update,
  cron: deleteFileCron,
};
